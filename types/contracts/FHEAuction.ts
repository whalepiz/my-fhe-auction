/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface FHEAuctionInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "bid"
      | "biddingEnd"
      | "getStatus"
      | "hasBid"
      | "item"
      | "protocolId"
      | "seller"
      | "settle"
      | "settled"
      | "winningBidEnc"
      | "winningIndexEnc"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "BidSubmitted" | "Settled"): EventFragment;

  encodeFunctionData(
    functionFragment: "bid",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "biddingEnd",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getStatus", values?: undefined): string;
  encodeFunctionData(functionFragment: "hasBid", values: [AddressLike]): string;
  encodeFunctionData(functionFragment: "item", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "protocolId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "seller", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "settle",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(functionFragment: "settled", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "winningBidEnc",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "winningIndexEnc",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "bid", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "biddingEnd", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getStatus", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasBid", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "item", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "protocolId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "seller", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "settle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "settled", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "winningBidEnc",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "winningIndexEnc",
    data: BytesLike
  ): Result;
}

export namespace BidSubmittedEvent {
  export type InputTuple = [bidder: AddressLike];
  export type OutputTuple = [bidder: string];
  export interface OutputObject {
    bidder: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SettledEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface FHEAuction extends BaseContract {
  connect(runner?: ContractRunner | null): FHEAuction;
  waitForDeployment(): Promise<this>;

  interface: FHEAuctionInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  bid: TypedContractMethod<
    [inputEuint32: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;

  biddingEnd: TypedContractMethod<[], [bigint], "view">;

  getStatus: TypedContractMethod<
    [],
    [
      [string, bigint, boolean] & {
        _item: string;
        _end: bigint;
        _settled: boolean;
      }
    ],
    "view"
  >;

  hasBid: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  item: TypedContractMethod<[], [string], "view">;

  protocolId: TypedContractMethod<[], [bigint], "view">;

  seller: TypedContractMethod<[], [string], "view">;

  settle: TypedContractMethod<[bidders: AddressLike[]], [void], "nonpayable">;

  settled: TypedContractMethod<[], [boolean], "view">;

  winningBidEnc: TypedContractMethod<[], [string], "view">;

  winningIndexEnc: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "bid"
  ): TypedContractMethod<
    [inputEuint32: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "biddingEnd"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getStatus"
  ): TypedContractMethod<
    [],
    [
      [string, bigint, boolean] & {
        _item: string;
        _end: bigint;
        _settled: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasBid"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "item"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "protocolId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "seller"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "settle"
  ): TypedContractMethod<[bidders: AddressLike[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "settled"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "winningBidEnc"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "winningIndexEnc"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "BidSubmitted"
  ): TypedContractEvent<
    BidSubmittedEvent.InputTuple,
    BidSubmittedEvent.OutputTuple,
    BidSubmittedEvent.OutputObject
  >;
  getEvent(
    key: "Settled"
  ): TypedContractEvent<
    SettledEvent.InputTuple,
    SettledEvent.OutputTuple,
    SettledEvent.OutputObject
  >;

  filters: {
    "BidSubmitted(address)": TypedContractEvent<
      BidSubmittedEvent.InputTuple,
      BidSubmittedEvent.OutputTuple,
      BidSubmittedEvent.OutputObject
    >;
    BidSubmitted: TypedContractEvent<
      BidSubmittedEvent.InputTuple,
      BidSubmittedEvent.OutputTuple,
      BidSubmittedEvent.OutputObject
    >;

    "Settled()": TypedContractEvent<
      SettledEvent.InputTuple,
      SettledEvent.OutputTuple,
      SettledEvent.OutputObject
    >;
    Settled: TypedContractEvent<
      SettledEvent.InputTuple,
      SettledEvent.OutputTuple,
      SettledEvent.OutputObject
    >;
  };
}
